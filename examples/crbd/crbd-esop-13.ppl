let tree = {
  left:{left:{age:0},right:{age:0},age:4},
  right:{left:{age:0},right:{age:0},age:6},
  age:10
} in

let lambda = 0.2 in let mu = 0.1 in

let crbdGoesExtinct startTime =
  let curTime = startTime
    - (sample (exponential (lambda + mu))) in
  if curTime < 0 then false
  else
    let speciation = sample
      (bernoulli (lambda / (lambda + mu))) in
    if !speciation then true
    else crbdGoesExtinct curTime
      && crbdGoesExtinct curTime in

let simBranch startTime stopTime =
  let curTime = startTime -
    sample (exponential lambda) in
  if curTime < stopTime then ()
  else if not (crbdGoesExtinct curTime)
  then (weight (log 0); resample ()) // #1
  else (weight (log 2); // #2
        simBranch curTime stopTime) in

let simTree tree parent =
  let w = -mu * (parent.age - tree.age) in
  weight w; resample(); // #3
  simBranch parent.age tree.age;
  match tree with
  | {left,right,age} ->
    simTree left tree; simTree right tree
  | {age} -> () in

simTree tree.left tree;
simTree tree.right tree
