// Simplified (and incorrect) CRBD reference implementation in WebPPL, used for
// developing the CUDA compilation

var leaf = function(v,i) {
  return { type:'leaf', age:v, index:i }
}

var node = function(v,l,r) {
  return { type:'node', left:l, right:r, age:v}
}

var tree = node(1.0,leaf(0.0,1),leaf(0.0,2));

var crbdGoesUndetected = function(startTime, lambda, mu) {
  var t = exponential({ a: lambda + mu });

  var currentTime = startTime - t;

  if ( currentTime < 0 ) {
    return false
  }

  var speciation = flip(lambda / (lambda + mu))
  if (!speciation)
    return true;

  return(crbdGoesUndetected(currentTime, lambda, mu)
         && crbdGoesUndetected(currentTime, lambda, mu));
}

var simBranch = function(startTime, stopTime, lambda, mu) {

  var t = exponential({ a: lambda });

  var currentTime = startTime - t;

  if (currentTime <= stopTime)
    return 0.0;

  factor(Math.log( 2.0 ));
  condition(crbdGoesUndetected(currentTime,lambda,mu))

  return simBranch( currentTime, stopTime, lambda, mu )

}

var simTree = function( tree, parent, lambda, mu ) {

  factor( - mu * ( parent.age - tree.age ) );

  simBranch( parent.age, tree.age, lambda, mu );

  if ( tree.type == 'node') {
    factor( Math.log( lambda ) );
    simTree( tree.left,  tree, lambda, mu )
    simTree( tree.right, tree, lambda, mu )
  }

}

var model = function() {

  var lambda = 0.2
  var mu = 0.1

  factor(Math.log( 2.0 ))

  simTree( tree.left,  tree, lambda, mu )
  simTree( tree.right, tree, lambda, mu )

  return (lambda, mu)

}

var dist = Infer( {method: 'SMC', particles: 10000, model: model} );

dist.normalizationConstant;
